# ansible-playbook deploy.yaml -i inventories/dev/hosts --vault-id ~/.tokens/master_id

- hosts: all
  strategy: free
  roles:
    - docker_stack

  environment:
    DOCKER_STACK: "{{ docker_stack }}"
    DOCKER_REGISTRY: "{{ docker_registry }}"
    DOCKER_REGISTRY_USER: "{{ docker_registry_user }}"
    DOCKER_REGISTRY_PASSWORD: "{{ docker_registry_password }}"

  tasks:

    - name: "Ensuring existence of configuration directory: {{ app_data }}/{{ docker_service }}"
      command: mkdir -p {{ app_data }}/{{ docker_service }}
      args:
        warn: no
      become: yes
      become_user: "{{ user }}"
      vars:
        docker_service: server/certs

    - name: "Rendering public certificates..."
      template:
        src: "{{ source }}"
        dest: "{{ app_data }}/{{ docker_service }}/{{ out }}"
      become: yes
      become_user: "{{ user }}"
      with_items: "{{ certs }}"
      loop_control:
        label: "{{ out }}"
      vars:
        docker_service: server/certs
        source: tls.cert.j2
        out: "{{ item.common_name }}.cert"

    - name: "Rendering private keys..."
      template:
        src: "{{ source }}"
        dest: "{{ app_data }}/{{ docker_service }}/{{ out }}"
      become: yes
      become_user: "{{ user }}"
      with_items: "{{ certs }}"
      loop_control:
        label: "{{ out }}"
      vars:
        docker_service: server/certs
        source: tls.key.j2
        out: "{{ item.common_name }}.key"

    - name: "Rendering {{ source }} to {{ app_data }}/{{ docker_service }}/{{ out }}"
      template:
        src: "{{ source }}"
        dest: "{{ app_data }}/{{ docker_service }}/{{ out }}"
      become: yes
      become_user: "{{ user }}"
      vars:
        docker_service: server
        source: .htpasswd.j2
        out: .htpasswd

    - name: "Rendering {{ source }} to {{ app_data }}/{{ docker_service }}/{{ out }}"
      template:
        src: "{{ source }}"
        dest: "{{ app_data }}/{{ docker_service }}/{{ out }}"
      become: yes
      become_user: "{{ user }}"
      vars:
        docker_service: server
        source: traefik.toml.j2
        out: traefik.toml

    - include_role:
        name: docker_stack
        tasks_from: deploy
